# PaaS_MySQL MHA集群部署文档
## 配置步骤
1. 架构设计
2. 服务器初始化准备
3. 服务器角色分配，IP规划
4. 安装包准备
5. 目录规划
6. 安装MySQL
7. 安装主从复制
8. 配置ssh互信
9. 安装MHA
10. 安装keepalived
11. 安装haproxy
12. 集群测试


## 1.架构设计
![Image text](paas_mysql_mha_架构.png)

## 2.服务器初始化准备
- 系统安装：centos7.6最小化安装，数据目录LVM：/home
- 网卡：bond0 绑定2块网卡
- 关闭selinux，防火墙，配置时区和时间同步，设置主机名

## 3.服务器角色分配，IP规划
- 10.80.16.63	paas-mysql01  HA-主
- 10.80.16.64	paas-mysql02  HA-从
- 10.80.16.66	paas-mysql03  LB-从1
- 10.80.16.67	paas-mysql04  LB-从2
- 10.80.16.34   monitor       MHA监控

## 4.安装包准备
- mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz
- mha4mysql-node-0.57-0.el6.noarch.rpm
- mha4mysql-manager-0.57-0.el6.noarch.rpm

## 5.目录规划
- /tmp/soft  软件包路径
- /usr/local/mysql MySQL安装目录
- /home/mysql/data  MySQL数据目录
 
## 6.安装MySQL 
- paas-mysql01-4 执行相同操作
```bash
# 创建MySQL用户
groupadd -g 27 mysql
useradd -u 27 -r -g mysql -s /bin/false mysql

# 解压
tar zxvf /tmp/soft/mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz -C /usr/local/
ln -sv /usr/local/mysql-5.7.28-linux-glibc2.12-x86_64 /usr/local/mysql

# 创建数据目录
mkdir -pv /home/mysql/{data,binlogs,dmp,backup,logs}
chown -R mysql.mysql /home/mysql
chown -R mysql.mysql /usr/local/mysql-5.7.28-linux-glibc2.12-x86_64
chown -R mysql.mysql /usr/local/mysql

# 关闭selinux和防火墙，检查时区时间同步
## selinux
sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config
setenforce 0

## 防火墙
systemctl stop firewalld
systemctl disable firewalld

## 时区
cp /usr/share/zoninfo/Asia/Shanghai /etc/localtime

ntpdate 0.centos.poool.ntp.org


## 准备配置文件
cp /etc/my.cnf /etc/my.cnf.org
vim /etc/my.cnf
## 查看所有可用参数  mysqld --help --verbose
[mysqld]
port = 3306
socket = /home/mysql/data/mysql.sock
pid_file = /home/mysql/data/mysql.pid
datadir = /home/mysql/data
user=mysql

## 服务器标识,每个实例id都不一样  63,64,66,67
server-id=63

## 包大小，连接数，文件数限制
max_allowed_packet = 512M
max_connections = 10240
max-connect-errors=100000
open_files_limit = 65535
innodb_open_files=65535

## 字符集设置
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci
init_connect='SET NAMES utf8mb4'

## 开启 LOAD LOCAL INFILE
local_infile = 1

## 默认数据库时区
default-time-zone='+8:00'

## 日志显示默认时区
log_timestamps = SYSTEM 

## 日志设置
## 错误日志
log-error = /home/mysql/data/mysql_error.log
## 二进制日志
log-bin = /home/mysql/binlogs/mysql-bin
## 日志保留时间
expire_logs_days = 7
## 开启慢查询日志
slow_query_log = 1
slow_query_log_file = /home/mysql/logs/mysql_slow_query.log
## 记录未使用索引的查询
log-queries-not-using-indexes = 1
## 慢查询阈值为5s
long_query_time = 5

# 不区分表名大小写
lower_case_table_names = 1


# 数据库初始化
/usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/home/mysql/data

# 查看临时密码
cat /home/mysql/data/mysql_error.log |grep password 
dJc=apJoY9oa   <dy%f-&a(3>O   TYuV<ig%S6kr  2qynlpqIwP_>

# 环境变量
vi ~/.bash_profile
MYSQL_PATH=/usr/local/mysql
PATH=$PATH:$MYSQL_PATH/bin

# 启动
mysqld_safe &

# 首次修改密码
mysql -uroot -p"dJc=apJoY9oa" -S /home/mysql/data/mysql.sock
ALTER USER 'root'@'localhost' IDENTIFIED BY 'xxx!';
flush privileges;

```


## 7.安装主从复制
```bash
# 创建复制用户 63上执行
GRANT REPLICATION SLAVE ON *.* TO 'repl'@'10.80.16.%' IDENTIFIED BY 'xxxx';
reset master;

# 64,66,67执行
GRANT REPLICATION SLAVE ON *.* TO 'repl'@'10.80.16.%' IDENTIFIED BY 'xxxxx';
CHANGE MASTER TO MASTER_HOST='10.80.16.63', MASTER_USER='repl', MASTER_PASSWORD='repl', MASTER_CONNECT_RETRY=60;
start slave;

# 检查备库状态
show slave status\G

```

## 8.配置ssh互信
```bash
# 创建mha用户
useradd mhauser
su - mhauser
ssh-keygen -t rsa -N ''
cat /home/mhauser/.ssh/*.pub > /home/mhauser/.ssh/authorized_keys
cat /home/mhauser/.ssh/authorized_keys
```

## 9.安装mha
```bash
# 所有节点创建MHA用户 
useradd mhauser

# 监控节点
yum localinstall mha4mysql-node-0.57-0.el6.noarch.rpm
yum localinstall mha4mysql-manager-0.57-0.el6.noarch.rpm

# 数据库节点
yum localinstall mha4mysql-node-0.57-0.el6.noarch.rpm

# 修复bug
# 修复 bug  很重要，不修复会导致 masterha_check_repl --conf=/etc/mha/masterha_default.cnf 失败
vi +155 /usr/share/perl5/vendor_perl/MHA/DBHelper.pm
my $dsn      = "DBI:mysql:;host=[$host];port=$port;mysql_connect_timeout=1";
改成 my $dsn      = "DBI:mysql:;host=$host;port=$port;mysql_connect_timeout=1";

vi +198 /usr/share/perl5/vendor_perl/MHA/DBHelper.pm
 $self->{dsn} = "DBI:mysql:;host=[$host];port=$port;mysql_connect_timeout=4";
改成   $self->{dsn} = "DBI:mysql:;host=$host;port=$port;mysql_connect_timeout=4";
    }

vi +98 /usr/share/perl5/vendor_perl/MHA/HealthCheck.pm
  "DBI:mysql:;host=[$self->{ip}];"
 改成"DBI:mysql:;host=$self->{ip};"

# 准备配置文件 监控节点
su - mhauser
mkdir ~/mha
cd ~/mha
vim masterha_default.conf
[server default]
manager_workdir=/home/mhauser/mha
manager_log=/home/mhauser/mha/manager.log
remote_workdir=/tmp
master_binlog_dir=/home/mysql/binlogs
ping_interval=1

ssh_user=mhauser
repl_user=repl
repl_password=repl
user=mha
password=PassW0rd_


[server1]
hostname=10.80.16.63
candidate_master=1
port=3306

[server2]
hostname=10.80.16.64
candidate_master=1
port=3306

[server3]    
hostname=10.80.16.66
#candidate_master=1
no_master=1
port=3306

[server4]
hostname=10.80.16.67
no_master=1
port=3306


# 创建监控用户 ，主节点中执行
grant all privileges on *.* to 'mha'@'10.80.16.%' identified  by 'PassW0rd_';
flush privileges;

# 安装包依赖 需开放外网安装
cpan
cpan[1]> install ExtUtils::Constant
Warning (usually harmless): 'YAML' not installed, will not store persistent state

cpanm Socket

# 添加访问权限
usermod -a -G mysql mhauser

ln -s /usr/local/mysql/bin/mysqlbinlog /usr/local/bin/mysqlbinlog
ln -s /usr/local/mysql/bin/mysql /usr/local/bin/mysql 


# 测试配置文件 
masterha_check_ssh --conf=/home/mhauser/mha/masterha_default.cnf
masterha_check_repl --conf=/home/mhauser/mha/masterha_default.cnf


# 启动停止
masterha_manager --conf=/home/mhauser/mha/masterha_default.cnf &
masterha_check_status --conf=/home/mhauser/mha/masterha_default.cnf
masterha_stop  --conf=/home/mhauser/mha/masterha_default.cnf 

```

## 10.安装keepalived
```bash
# 安装keepliave （63，64一组主备） （66，67一组主备）
yum -y install keepalived

# 修改配置文件
cd /etc/keeplived
cp keeplived.conf keeplived.conf.org

# ha组
# 10.80.16.63
cat > /etc/keepalived/keepalived.conf <<EOF
global_defs {
    router_id mha-master-63
}
vrrp_script check_nginx {
    # script "/etc/keepalived/check_nginx.sh"
}
vrrp_instance VI-kube-master {
    state MASTER
    interface bond0
    virtual_router_id 51
    priority 90
    nopreempt
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 11119987
    }
    virtual_ipaddress {
        10.80.16.65/24
    }
    track_script {
        # check_nginx
    }
}
EOF

# 10.80.16.64
cat > /etc/keepalived/keepalived.conf <<EOF
global_defs {
    router_id mha-backup-64
}
vrrp_script check_nginx {
    # script "/etc/keepalived/check_nginx.sh"
}
vrrp_instance VI-kube-master { 
    state BACKUP
    interface bond0
    virtual_router_id 51
    priority 90
    advert_int 1
    nopreempt
    authentication {
        auth_type PASS
        auth_pass 11119987
    }  
    virtual_ipaddress {
        10.80.16.65/24
    }
    track_script {
        # check_nginx
    }
}
EOF

# 服务启动
systemctl enable keepalived
systemctl start keepalived


# lb组

# 10.80.16.66
cat > /etc/keepalived/keepalived.conf <<EOF
global_defs {
    router_id mha-lb-66
}
vrrp_script check_nginx {
    # script "/etc/keepalived/check_nginx.sh"
}
vrrp_instance VI-kube-master {
    state MASTER
    interface bond0
    virtual_router_id 52
    priority 90
    nopreempt
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 11119987
    }
    virtual_ipaddress {
        10.80.16.68/24
    }
    track_script {
        # check_nginx
    }
}
EOF

# 10.80.16.67
cat > /etc/keepalived/keepalived.conf <<EOF
global_defs {
    router_id mha-lb-67
}
vrrp_script check_nginx {
    # script "/etc/keepalived/check_nginx.sh"
}
vrrp_instance VI-kube-master { 
    state BACKUP
    interface bond0
    virtual_router_id 52
    priority 90
    advert_int 1
    nopreempt
    authentication {
        auth_type PASS
        auth_pass 11119987
    }  
    virtual_ipaddress {
        10.80.16.68/24
    }
    track_script {
        # check_nginx
    }
}
EOF

# 服务启动
systemctl enable keepalived
systemctl start keepalived

```

## 11.安装haproxy
- 66，67配置保持一致
```bash
# 安装haproxy
yum install haproxy

# 准备配置文件
cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.org
vim /etc/haproxy/haproxy.cfg
Global
    log         127.0.0.1 local2
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon
    stats socket /var/lib/haproxy/stats
 
defaults
        log     global
        log 127.0.0.1 local3
        mode    http
        option  tcplog
        option  dontlognull
        retries 10
        option redispatch
        maxconn         2000
        timeout connect         10s
        timeout client          1m
        timeout server          1m
        timeout http-keep-alive 10s
        timeout check           10s
 
listen  mysql
        bind 0.0.0.0:7306
        mode tcp
        balance roundrobin
        server paas-mysql03 10.80.16.66:3306
        server paas-mysql04 10.80.16.67:3306
 
listen stats
        bind 0.0.0.0:1080
        mode http
        option httplog
        maxconn 10
        stats refresh 30s
        stats uri /stats
        stats realm XingCloud\ Haproxy
        stats auth admin:admin #用这个账号登录，可以自己设置
        stats auth Frank:Frank
        stats hide-version
        stats admin if TRUE

# 启动服务
systemctl enable haproxy
systemctl start haproxy

```

## 12.集群测试
- 观察MHA主从切换是否正常
  - 重启63服务器，观察各个节点集群状态
    ```bash
    # 观察64服务器状态，已经从slave提升为了主
    mysql> show slave status;
    Empty set (0.00 sec)
    
    # 观察66，67服务器，master已经自动切换成了64服务器
    
    mysql> show slave status\G
    *************************** 1. row ***************************
    Slave_IO_State: Waiting for master to send event
     Master_Host: 10.80.16.64
     Master_User: repl
    ```
  - 观察manager输出日志,证实发生了故障转移
  ```bash
    Master 10.80.16.63(10.80.16.63:3306) is down!
    
    Check MHA Manager logs at Innovation-DB01:/home/mhauser/mha/manager.log for details.
    
    Started automated(non-interactive) failover.
    The latest slave 10.80.16.64(10.80.16.64:3306) has all relay logs for recovery.
    Selected 10.80.16.64(10.80.16.64:3306) as a new master.
    10.80.16.64(10.80.16.64:3306): OK: Applying all logs succeeded.
    10.80.16.67(10.80.16.67:3306): This host has the latest relay log events.
    10.80.16.66(10.80.16.66:3306): This host has the latest relay log events.
    Generating relay diff files from the latest slave succeeded.
    10.80.16.66(10.80.16.66:3306): OK: Applying all logs succeeded. Slave started, replicating from 10.80.16.64(10.80.16.64:3306)
    10.80.16.67(10.80.16.67:3306): OK: Applying all logs succeeded. Slave started, replicating from 10.80.16.64(10.80.16.64:3306)
    10.80.16.64(10.80.16.64:3306): Resetting slave info succeeded.
    Master failover to 10.80.16.64(10.80.16.64:3306) completed successfully.
    ```
  
  - 观察keepalived虚拟IP漂移是否正常
    - ip addr 观察bound网卡VIP漂移情况,当63重启时，VIP自动漂移到了64上，证明VIP工作正常
    ```bash
    6: bond0: <BROADCAST,MULTICAST,MASTER,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether b0:26:28:b9:66:bc brd ff:ff:ff:ff:ff:ff
    inet 10.80.16.64/24 brd 10.80.16.255 scope global bond0
       valid_lft forever preferred_lft forever
    inet 10.80.16.65/24 scope global secondary bond0
       valid_lft forever preferred_lft forever
    inet6 fe80::b226:28ff:feb9:66bc/64 scope link 
       valid_lft forever preferred_lft forever
    ```
  - 手工恢复故障Master主机
  ```bash
  mysqld_safe &
  CHANGE MASTER TO MASTER_HOST='10.80.16.64', MASTER_USER='repl', MASTER_PASSWORD='repl', MASTER_CONNECT_RETRY=60;
  start slave;
  ```




