<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="并发__限价挂单并比对数据" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">200</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Cookie</stringProp>
              <stringProp name="Header.value">mytoken=${token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">webmoon.pre.moolecloud.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:\Users\eqkil\Desktop\生产jmeter\pre.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">num,username,countrycode,pid,type,stockid,leverage,startbond,openprice,stoploss,direction,targetprofit,ordertype,fee,feeback,snapdeduct,appendamount,appendfee,simstatus,isOffsetFee,overnightfee,token </stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="userLogin" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="mobileOrEmail" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${username}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mobileOrEmail</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">abc123456</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">account/app/user_action/user_login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion_code" enabled="true">
            <stringProp name="JSON_PATH">$.code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_code" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">code</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="print_start" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println();
log.info(&quot;&quot;);
System.out.println(&quot;------------------- 订单 &quot; + vars.get(&quot;num&quot;).toString() + &quot; -------------------&quot;);
log.info(&quot;------------------- 订单 &quot; + vars.get(&quot;num&quot;).toString() + &quot; -------------------&quot;);

if((vars.get(&quot;code&quot;).toString()).equals(&quot;0&quot;))
{
	System.out.println(vars.get(&quot;countrycode&quot;) + &quot; &quot; + vars.get(&quot;username&quot;) + &quot; 登录成功！&quot;);
	log.info(vars.get(&quot;countrycode&quot;) + &quot; &quot; + vars.get(&quot;username&quot;) + &quot; 登录成功！&quot;);

}
else{
	System.out.println(vars.get(&quot;countrycode&quot;) + &quot; &quot; + vars.get(&quot;username&quot;) + &quot; 登录失败！&quot;);
	log.info(vars.get(&quot;countrycode&quot;) + &quot; &quot; + vars.get(&quot;username&quot;) + &quot; 登录失败！&quot;);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="balancemargin_before" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cfd/app/Purchase/balanceMarginWithoutSnap</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion_code" enabled="true">
            <stringProp name="JSON_PATH">$.code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_code" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">code</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_msg" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">msg</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.msg</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Assertion_code" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">if((vars.get(&quot;code&quot;).toString()).equals(&quot;0&quot;))
{
	System.out.println(&quot;下挂单前获取金额成功！code= &quot; + vars.get(&quot;code&quot;).toString());
	log.info(&quot;下挂单前获取金额成功！code= &quot; + vars.get(&quot;code&quot;).toString());
}
else{
	System.out.println(&quot;下挂单前获取金额失败！code= &quot; + vars.get(&quot;code&quot;).toString() + &quot; msg= &quot; + vars.get(&quot;msg&quot;).toString());
	log.info(&quot;下挂单前获取金额失败！code= &quot; + vars.get(&quot;code&quot;).toString() + &quot; msg= &quot; + vars.get(&quot;msg&quot;).toString());
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_balancebefore" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">balancebefore</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.balance</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_alreadyusedMoneybefore" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">alreadyusedMoneybefore</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.alreadyused</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="print_balancebefore" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
System.out.println(&quot;限价下挂单前账户余额 = &quot; + vars.get(&quot;balancebefore&quot;).toString());
log.info(&quot;限价下挂单前账户余额 = &quot; + vars.get(&quot;balancebefore&quot;).toString());


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="print_alreadyusedMoneybefore" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println(&quot;限价下挂单前冻结保证金 = &quot; + vars.get(&quot;alreadyusedMoneybefore&quot;).toString());
log.info(&quot;限价下挂单前冻结保证金 = &quot; + vars.get(&quot;alreadyusedMoneybefore&quot;).toString());
System.out.println();
log.info(&quot;&quot;);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="placePendingOrder" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${pid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">pid</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${type}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="stockid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${stockid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">stockid</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="leverage" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${leverage}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">leverage</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="startBond" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${startbond}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">startBond</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="openPrice" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${openprice}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">openPrice</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="direction" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${direction}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">direction</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="stoploss" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${stoploss}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">stoploss</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="targetprofit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${targetprofit}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">targetprofit</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="deviceType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Web</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">deviceType</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="simulatedTradingStatus" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">simulatedTradingStatus</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="isOffsetFee" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isOffsetFee</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
              <elementProp name="orderType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ordertype}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">orderType</stringProp>
                <stringProp name="HTTPArgument.content_type"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/cfd/app/pendingOrder/placePendingOrder</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
            <intProp name="groupSize">10</intProp>
            <longProp name="timeoutInMs">0</longProp>
          </SyncTimer>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_code" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">code</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_msg" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">msg</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.msg</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ordercode</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;ordercode&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_ordercode" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">ordercode</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.ordercode</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Assertion_code" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println(&quot;------------------- 订单 &quot; + vars.get(&quot;num&quot;).toString() + &quot; -------------------&quot;);
log.info(&quot;------------------- 订单 &quot; + vars.get(&quot;num&quot;).toString() + &quot; -------------------&quot;);

if((vars.get(&quot;code&quot;).toString()).equals(&quot;0&quot;))
{
	System.out.println(&quot;下挂单成功！code= &quot; + vars.get(&quot;code&quot;).toString() + &quot;; ordercode= &quot; + vars.get(&quot;ordercode&quot;).toString());
	log.info(&quot;下挂单成功！code= &quot; + vars.get(&quot;code&quot;).toString() + &quot;; ordercode= &quot; + vars.get(&quot;ordercode&quot;).toString());
}
else{
	System.out.println(&quot;下挂单失败！code= &quot; + vars.get(&quot;code&quot;).toString() + &quot; msg= &quot; + vars.get(&quot;msg&quot;).toString());
	log.info(&quot;下挂单失败！code= &quot; + vars.get(&quot;code&quot;).toString() + &quot; msg= &quot; + vars.get(&quot;msg&quot;).toString());
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="print_orderinfo" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println(&quot;挂单的保证金 = &quot; + vars.get(&quot;startbond&quot;).toString());
log.info(&quot;挂单的保证金 = &quot; + vars.get(&quot;startbond&quot;).toString());

if((vars.get(&quot;direction&quot;).toString()).equals(&quot;0&quot;))
{
	System.out.println(&quot;挂单是买涨&quot;);
	log.info(&quot;挂单是买涨&quot;);
}
else
{
	System.out.println(&quot;挂单是买跌&quot;);
	log.info(&quot;挂单是买跌&quot;);
}

System.out.println(&quot;挂单的开单价 = &quot; + vars.get(&quot;openprice&quot;).toString());
log.info(&quot;挂单的开单价 = &quot; + vars.get(&quot;openprice&quot;).toString());

System.out.println(&quot;挂单的杠杆 = &quot; + vars.get(&quot;leverage&quot;).toString());
log.info(&quot;挂单的杠杆 = &quot; + vars.get(&quot;leverage&quot;).toString());</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell 后置处理程序" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">FileWriter fstream = new FileWriter(&quot;C://Users//eqkil//Desktop//abc.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
String str = vars.get(&quot;ordercode&quot;);
if(str!=null) {
out.write(str+&quot;\n&quot;);	
}
out.close();
fstream.close();
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="balancemargin_after" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/cfd/app/Purchase/balanceMarginWithoutSnap</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion_code" enabled="true">
            <stringProp name="JSON_PATH">$.code</stringProp>
            <stringProp name="EXPECTED_VALUE">0</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_code" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">code</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_msg" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">msg</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.msg</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Assertion_code" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">if((vars.get(&quot;code&quot;).toString()).equals(&quot;0&quot;))
{
	System.out.println(&quot;下挂单后获取金额成功！code= &quot; + vars.get(&quot;code&quot;).toString());
	log.info(&quot;下挂单后获取金额成功！code= &quot; + vars.get(&quot;code&quot;).toString());
}
else{
	System.out.println(&quot;下挂单后获取金额失败！code= &quot; + vars.get(&quot;code&quot;).toString() + &quot; msg= &quot; + vars.get(&quot;msg&quot;).toString());
	log.info(&quot;下挂单后获取金额失败！code= &quot; + vars.get(&quot;code&quot;).toString() + &quot; msg= &quot; + vars.get(&quot;msg&quot;).toString());
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_balanceafter" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">balanceafter</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.balance</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get_alreadyusedMoneyafter" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">alreadyusedMoneyafter</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.alreadyused</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Assertion_remainalreadyusedMoney" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println(&quot;限价下订单后冻结保证金 = &quot; + vars.get(&quot;alreadyusedMoneyafter&quot;).toString());
log.info(&quot;限价下订单后冻结保证金 = &quot; + vars.get(&quot;alreadyusedMoneyafter&quot;).toString());

import java.math.BigDecimal;

BigDecimal number1 = new BigDecimal(vars.get(&quot;alreadyusedMoneyafter&quot;));
BigDecimal number2 = new BigDecimal(vars.get(&quot;alreadyusedMoneybefore&quot;)); 
BigDecimal num1 = number1.setScale(2, BigDecimal.ROUND_HALF_UP);
BigDecimal num2 = number2.setScale(2, BigDecimal.ROUND_HALF_UP);
//System.out.println(num1);
//System.out.println(num2);

if (num1.compareTo(num2) == 0) 
{  
	System.out.println(&quot;两位数一样大！限价下订单冻结保证金计算不正确&quot;); 
	log.info(&quot;两位数一样大！限价下订单冻结保证金计算不正确&quot;); 
}
else
{
	System.out.println(&quot;两位数不一样大！限价下订单冻结保证金计算正确&quot;);
	log.info(&quot;两位数不一样大！限价下订单冻结保证金计算正确&quot;);
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Assertion_remainbalance" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println(&quot;限价下订单后账户余额 = &quot; + vars.get(&quot;balanceafter&quot;).toString());
log.info(&quot;限价下订单后账户余额 = &quot; + vars.get(&quot;balanceafter&quot;).toString());

import java.math.BigDecimal;

BigDecimal number1 = new BigDecimal(vars.get(&quot;balanceafter&quot;));
BigDecimal number2 = new BigDecimal(vars.get(&quot;balancebefore&quot;)); 
BigDecimal num1 = number1.setScale(2, BigDecimal.ROUND_HALF_UP);
BigDecimal num2 = number2.setScale(2, BigDecimal.ROUND_HALF_UP);
//System.out.println(num1);
//System.out.println(num2);

if (num1.compareTo(num2) == 0) 
{  
	System.out.println(&quot;两位数一样大！限价下订单账户余额计算不正确&quot;); 
	log.info(&quot;两位数一样大！限价下订单账户余额计算不正确&quot;); 
}
else
{
	System.out.println(&quot;两位数不一样大！限价下订单账户余额计算正确&quot;);
	log.info(&quot;两位数不一样大！限价下订单账户余额计算正确&quot;);
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="print_stop" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">System.out.println();
log.info(&quot;&quot;);


</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
